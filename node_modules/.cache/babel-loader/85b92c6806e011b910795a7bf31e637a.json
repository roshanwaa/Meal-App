{"ast":null,"code":"var _jsxFileName = \"D:\\\\New folder\\\\React-Learn\\\\Section 11 Practice Project Building a Food Order App\\\\src\\\\Components\\\\Cart\\\\Checkout.jsx\";\nimport React from 'react';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar placeSearch, autocomplete; // List all address components (corresponds to form field IDs and Google address object)\n\nvar componentForm = {\n  autocomplete: ['street_number', 'route'],\n  inputCity: 'locality',\n  inputState: 'administrative_area_level_1',\n  inputZip: 'postal_code',\n  inputCounty: 'administrative_area_level_2',\n  inputCountry: 'country'\n}; // Create autocomplete object based on the autocomplete (\"street\") field\n// Location type restricted to geocode\n\nfunction initAutocomplete() {\n  autocomplete = new google.maps.places.Autocomplete(\n  /** @type {!HTMLInputElement} */\n  document.getElementById('autocomplete'), {\n    type: ['geocode']\n  }); // Call fillInAddress when user selects an address from dropdown\n\n  autocomplete.addListener('place_changed', fillInAddress);\n} // Fill fields with values from Google Maps autocomplete object\n\n\nfunction fillInAddress() {\n  // Get place data from autocomplete object\n  var place = autocomplete.getPlace();\n  console.log(place); // Enable each field, then fill them with the corresponding value from the place object\n\n  for (var component in componentForm) {\n    document.getElementById(component).disabled = false;\n    document.getElementById(component).value = search(componentForm[component], place.address_components);\n  } // Get each component of the address from the place\n  // object and fill the corresponding field\n  //   for (var i = 0; i < place.address_components.length; i++) {\n  //     var addressType = place.address_components[i].types[0];\n  //     if (componentForm[addressType]) {\n  //       var val = place.address_components[i][componentForm[addressType]];\n  //       document.getElementById(addressType).value = val;\n  //     }\n  //   }\n\n\n  if (search('street_number', place.address_components) != '') {\n    document.getElementById('autocomplete').value = search('street_number', place.address_components) + ' ';\n  }\n\n  document.getElementById('autocomplete').value += search('route', place.address_components);\n\n  function search(type, placeObject) {\n    for (var i = 0; i < placeObject.length; i++) {\n      if (placeObject[i].types[0] === type) {\n        return placeObject[i].short_name;\n      } else if (i === placeObject.length - 1) {\n        return '';\n      }\n    }\n  }\n}\n\nexport const Checkout = () => {\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    action: \"\",\n    className: classes.formGroup,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"name\",\n        className: \"form-control\",\n        id: \"name\",\n        placeholder: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"inputZip\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"zip\",\n        className: \"form-control\",\n        id: \"inputZip\",\n        placeholder: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.control,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"street\",\n        className: \"form-control\",\n        id: \"autocomplete\",\n        placeholder: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Confirm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_c = Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"names":["React","classes","placeSearch","autocomplete","componentForm","inputCity","inputState","inputZip","inputCounty","inputCountry","initAutocomplete","google","maps","places","Autocomplete","document","getElementById","type","addListener","fillInAddress","place","getPlace","console","log","component","disabled","value","search","address_components","placeObject","i","length","types","short_name","Checkout","formGroup","control"],"sources":["D:/New folder/React-Learn/Section 11 Practice Project Building a Food Order App/src/Components/Cart/Checkout.jsx"],"sourcesContent":["import React from 'react';\r\nimport classes from './Checkout.module.css';\r\n\r\nvar placeSearch, autocomplete;\r\n\r\n// List all address components (corresponds to form field IDs and Google address object)\r\nvar componentForm = {\r\n  autocomplete: ['street_number', 'route'],\r\n  inputCity: 'locality',\r\n  inputState: 'administrative_area_level_1',\r\n  inputZip: 'postal_code',\r\n  inputCounty: 'administrative_area_level_2',\r\n  inputCountry: 'country',\r\n};\r\n\r\n// Create autocomplete object based on the autocomplete (\"street\") field\r\n// Location type restricted to geocode\r\nfunction initAutocomplete() {\r\n  autocomplete = new google.maps.places.Autocomplete(\r\n    /** @type {!HTMLInputElement} */ (document.getElementById('autocomplete')),\r\n    { type: ['geocode'] }\r\n  ); // Call fillInAddress when user selects an address from dropdown\r\n\r\n  autocomplete.addListener('place_changed', fillInAddress);\r\n}\r\n\r\n// Fill fields with values from Google Maps autocomplete object\r\nfunction fillInAddress() {\r\n  // Get place data from autocomplete object\r\n  var place = autocomplete.getPlace();\r\n  console.log(place);\r\n\r\n  // Enable each field, then fill them with the corresponding value from the place object\r\n  for (var component in componentForm) {\r\n    document.getElementById(component).disabled = false;\r\n    document.getElementById(component).value = search(\r\n      componentForm[component],\r\n      place.address_components\r\n    );\r\n  } \r\n\r\n  // Get each component of the address from the place\r\n  // object and fill the corresponding field\r\n  //   for (var i = 0; i < place.address_components.length; i++) {\r\n\r\n  //     var addressType = place.address_components[i].types[0];\r\n\r\n  //     if (componentForm[addressType]) {\r\n  //       var val = place.address_components[i][componentForm[addressType]];\r\n  //       document.getElementById(addressType).value = val;\r\n  //     }\r\n  //   }\r\n\r\n  if (search('street_number', place.address_components) != '') {\r\n    document.getElementById('autocomplete').value =\r\n      search('street_number', place.address_components) + ' ';\r\n  }\r\n  document.getElementById('autocomplete').value += search(\r\n    'route',\r\n    place.address_components\r\n  );\r\n\r\n  function search(type, placeObject) {\r\n    for (var i = 0; i < placeObject.length; i++) {\r\n      if (placeObject[i].types[0] === type) {\r\n        return placeObject[i].short_name;\r\n      } else if (i === placeObject.length - 1) {\r\n        return '';\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport const Checkout = () => {\r\n  return (\r\n    <form action=\"\" className={classes.formGroup}>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"name\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          className=\"form-control\"\r\n          id=\"name\"\r\n          placeholder=\"Name\"\r\n        />\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"inputZip\">Postal Code</label>\r\n        <input\r\n          type=\"zip\"\r\n          className=\"form-control\"\r\n          id=\"inputZip\"\r\n          placeholder=\"Postal Code\"\r\n        />\r\n      </div>\r\n      <div className={classes.control}>\r\n        <label htmlFor=\"city\">City</label>\r\n        <input\r\n          type=\"street\"\r\n          className=\"form-control\"\r\n          id=\"autocomplete\"\r\n          placeholder=\"Street\"\r\n        />\r\n      </div>\r\n      <button>Confirm</button>\r\n    </form>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}